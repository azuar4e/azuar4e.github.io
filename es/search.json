[{"categories":["Universidad","Proyectos Personales"],"content":"Un proyecto universitario de la asignatura Sistemas Orientados a Servicios.","date":"2025-06-17","objectID":"/es/posts/sos/","tags":["Java","Spring","API"],"title":"Servicio RESTful","uri":"/es/posts/sos/"},{"categories":["Universidad","Proyectos Personales"],"content":"1 Introducci√≥n En este art√≠culo explico una implementaci√≥n de una REST API para el manejo de una biblioteca de libros. Esta implementaci√≥n est√° escrita en Java y utiliza el Framework Spring. El proyecto pertenece a la asignatura Sistemas Orientados a Servicios del grado en Ingenier√≠a Inform√°tica. Todo el c√≥digo fuente est√° disponible en mi repositorio de GitHub. 2 Vista general El servicio RESTful nos permite gestionar pr√©stamos de libros en una biblioteca. Para ello usamos tres entidades principales: libros, usuarios y pr√©stamos. En la siguiente imagen vemos el modelo Entidad-Relaci√≥n utilizado: Nota: la relacion libros-prestamos se supone que es una relaci√≥n de 1-1, pero en nuestra implementaci√≥n es una 1-n ya que se permiten m√∫ltiples pr√©stamos por libro mientras que este est√© disponible. 3 Dise√±o de la API La URL ra√≠z de la aplicaci√≥n es http://localhost:8080/biblioteca.api/. La API expone tres recursos: /libros /users /prestamos Cada uno permite operaciones CRUD completas (Create, Read, Update, Delete), utilizando los m√©todos HTTP est√°ndar (GET, POST, PUT, DELETE). Los siguientes endpoints est√°n disponibles: 3.1 üìö Libros GET /libros GET /libros/{isbn} GET /libros/{isbn}/unidades ‚Äì N√∫mero de copias disponibles GET /libros?titulo_contiene={titulo} ‚Äì B√∫squeda por t√≠tulo GET /libros?disponible={true|false} ‚Äì B√∫squeda por disponibilidad POST /libros PUT /libros/{isbn} DELETE /libros/{isbn} 3.2 üìÑ Pr√©stamos GET /prestamos GET /prestamos/{id} POST /prestamos PUT /prestamos/{id} ‚Äì Devolver libro o verificar pr√©stamo (establece el atributo devuelto en true o verificar_devolucion en true) DELETE /prestamos/{id} 3.3 üë§ Usuarios GET /users GET /users/{matricula} ‚Äì ID del estudiante GET /users/{matricula}/prestamos ‚Äì Pr√©stamos del estudiante PUT /users/{matricula}/prestamos/{id} ‚Äì Ampliar pr√©stamo (establece el atributo ampliar en true) GET /users/{matricula}/actividad ‚Äì Actividad del estudiante POST /users PUT /users/{matricula} DELETE /users/{matricula} 4 Arquitectura El proyecto sigue el patr√≥n Controller-Service-Repository, con la siguiente estructura: Modelo: Representa la informaci√≥n de la base de datos mediante entidades, relaciones y atributos (las tablas). Repositorio: Se encarga de interactuar directamente con la base de datos. Servicio: Contiene la l√≥gica de la aplicaci√≥n y se comunica con el repositorio para procesar datos. Controlador: Gestiona las peticiones y respuestas HTTP, conectando al cliente con la l√≥gica del servicio. Como podemos ver en la siguiente imagen, esa es la estructura del proyecto: En la carpeta Excepciones se declaran todos los tipos de error para cada recurso con el correspondiente c√≥digo de error HTTP. Todo el c√≥digo que se muestre a continuaci√≥n ser√° relativo a los pr√©stamos ya que es la entidad que relaciona libros y usuarios y por tanto es la m√°s representativa del funcionamiento general de la API. 4.1 Modelos Lo primero es definir las entidades que componen la base de datos. Para ello dentro de la carpeta models declaramos dos clases para cada entidad: Una en la que definimos la tabla y los atributos que la componen. Otra con el ModelAssembler que nos permite a√±adir enlaces HATEOAS a los recursos. A continuaci√≥n se muestra el modelo de la entidad Prestamo, en el cual hacemos uso de: Lombok (@Data, @NoArgsConstructor, @AllArgsConstructor) para generar autom√°ticamente getters, setters y constructores. JPA (@Entity, @Table, @Id, etc.) para mapear la clase a una tabla en la base de datos. Spring HATEOAS (extends RepresentationModel\u003cPrestamo\u003e) para a√±adir enlaces HATEOAS a los recursos con el ModelAssembler. package es.upm.sos.biblioteca.models; import java.time.LocalDate; import org.springframework.hateoas.RepresentationModel; import com.fasterxml.jackson.annotation.JsonBackReference; import jakarta.persistence.*; import lombok.*; @Entity @Table(name = \"Prestamo\") @Data @NoArgsConstructor @AllArgsConstructor public class Prestamo extends RepresentationModel\u003cPrestamo\u003e { @Id @GeneratedValue(strategy = G","date":"2025-06-17","objectID":"/es/posts/sos/:0:0","tags":["Java","Spring","API"],"title":"Servicio RESTful","uri":"/es/posts/sos/"},{"categories":["Universidad","Proyectos Personales"],"content":"Un proyecto universitario de la asignatura Traductores de Lenguajes.","date":"2025-06-17","objectID":"/es/posts/tdl/","tags":["Java","Python"],"title":"Traductor de Lenguajes","uri":"/es/posts/tdl/"},{"categories":["Universidad","Proyectos Personales"],"content":"1 Introducci√≥n En este art√≠culo explico el funcionamiento de un compilador, desde el procesamiento del fichero fuente hasta la traducci√≥n a c√≥digo objeto. Este post est√° basado en un trabajo universitario para la asignatura Traductores de Lenguajes. Todo el c√≥digo fuente est√° disponible en mi repositorio de GitHub (enlace al final, en la secci√≥n Herramientas). El traductor genera, a partir de un archivo de c√≥digo escrito en el Lenguaje Boreal, previamente validado por el procesador, un archivo .ens con el c√≥digo objeto del programa, escrito en el lenguaje ENS2001. El proyecto se divide en dos partes principales: Procesador de lenguajes, escrito en Java, proporcionado por la asignatura y extendido por nosotros. Traductor de lenguajes, desarrollado desde cero en Python. Nota: Esta implementaci√≥n solo cubre: Las sentencias IF-THEN e IF-THEN-ELSE. El operador m√≠nimo MIN. Los procedimientos PROCEDURE con paso de par√°metros por valor y por referencia. Los operadores *, AND y = (comparaci√≥n, no asignaci√≥n). ‚ö†Ô∏è El resto de operadores no est√°n cubiertos. ‚ö†Ô∏è Tampoco se realiza ninguna optimizaci√≥n sobre el c√≥digo objeto (ensamblador). ‚ö†Ô∏è Los materiales originales del Lenguaje Boreal y el procesador ENS2001 pueden no estar disponibles temporalmente. Este post se centra en mi implementaci√≥n del compilador, no en la distribuci√≥n de los materiales originales. Si necesitas consultarlos, puedes intentar acceder m√°s adelante o buscar versiones archivadas. 2 Procesador de Lenguajes El procesador de lenguajes es el responsable de validar que un fichero fuente no tenga errores de tipo l√©xico, sint√°ctico o sem√°ntico. Este m√≥dulo se divide en cuatro etapas: Analizador l√©xico Analizador sint√°ctico Analizador sem√°ntico Generador de c√≥digo intermedio, que en realidad pertenece al traductor pero forma parte del c√≥digo del procesador. Antes de comenzar, es importante conocer los siguientes conceptos: Tabla de s√≠mbolos: es la encargada de almacenar los identificadores de las variables, constantes, procedimientos, etc. E.g. TABLA PRINCIPAL #1: *LEXEMA: 'S1' Atributos: + Tipo: 'cadena' + Despl: 4 + Param: 0 *LEXEMA: 'IMPRIME' Atributos: + Tipo: 'procedimiento' + numParam: 2 + TipoParam0: 'entero' + TipoParam1: 'entero' + ModoParam0: 'valor' + ModoParam1: 'valor' + TipoRetorno: '-' + EtiqFuncion: 'EtiqProc2' Parse: es el encargado de almacenar el orden con el que se ejecutan las reglas de la gram√°tica. E.g. ascendente 2 21 20 19 20 20 18 17 17 17 17 15 9 100 20 100 20 ... ascendente indica el tipo de analizador sint√°ctico utilizado. Tokens: puede ser cualquier cosa: un for, un ;, el nombre de una variable, etc. El archivo fuente es dividido en tokens, que son almacenados en otro fichero bajo este nombre. E.g. \u003cVAR,-\u003e \u003cID,1\u003e \u003cDOSPUNTOS,-\u003e \u003cSTRING,-\u003e \u003cPYC,-\u003e \u003cID,2\u003e \u003cDOSPUNTOS,-\u003e ... Por √∫ltimo, el tipo de procesador. En este caso, usamos uno ascendente, pero tambi√©n existen descendentes, descendentes con tablas, etc. 2.1 Analizador l√©xico Para los errores l√©xicos, utilizamos un aut√≥mata que recorre el fichero fuente car√°cter a car√°cter. A medida que se avanza, se van evaluando los estados del aut√≥mata y, si todo va bien, se genera un archivo de tokens como salida. Si se encuentra alg√∫n s√≠mbolo que no encaja en el aut√≥mata, se considera un error l√©xico. E.g. de un aut√≥mata: Un caso t√≠pico de error l√©xico es una cadena sin cerrar. La siguiente imagen muestra un aut√≥mata que reconoce cadenas entre comillas: Aqu√≠, C representa cualquier car√°cter. Para alcanzar el estado final y reconocer una cadena correctamente, necesitamos que termine con un \". Tambi√©n se consideran errores l√©xicos situaciones como: Una cadena que supera la longitud m√°xima permitida Un n√∫mero fuera de rango Caracteres no v√°lidos en el lenguaje Entre otros. 2.2 Analizador sint√°ctico Para los errores sint√°cticos, se analizan las estructuras del lenguaje mediante reglas gramaticales. Estos errores aparecen cuando la secuencia de tokens no sigue la sintaxis esperada. Aqu√≠ entra los conceptos de fir","date":"2025-06-17","objectID":"/es/posts/tdl/:0:0","tags":["Java","Python"],"title":"Traductor de Lenguajes","uri":"/es/posts/tdl/"},{"categories":null,"content":" Todas vuestras cosas sean hechas con amor. ‚Äî 1 Corintios 16:14 Sobre m√≠ ¬°Hola a todos! üëã Mi nombre es √Ångel y soy un estudiante de Ingenier√≠a Inform√°tica de cuarto a√±o, centrado en el desarrollo y la gesti√≥n de entornos cloud. üë®‚Äçüíª Desarrollador de software ‚òÅÔ∏è Interesado en Cloud Computing e Infraestructura ¬† Mi GitHub: azuar4e En mi tiempo libre, adem√°s de seguir aprendiendo, me gusta entrenar, leer y descubrir m√∫sica. Si te interesa, aqu√≠ tienes mi perfil de Spotify. Aqu√≠ dejo uno de mis √°lbumes favoritos: Sobre este blog La idea de este blog es documentar mi camino de aprendizaje en tecnolog√≠a, explicando los conceptos de forma clara y accesible, tanto para quienes est√°n empezando como para quienes ya tienen experiencia. Temas tratados ‚òÅÔ∏è Infraestructura en la nube (AWS, GCP, Azure) üê≥ Contenedores y orquestaci√≥n (Docker, Kubernetes) üß† Arquitectura y buenas pr√°cticas üõ†Ô∏è Proyectos personales y universitarios Puedes seguir mis publicaciones aqu√≠ o en GitHub. // Cosas que intento aplicar cada d√≠a const actitud := { \"aprender algo nuevo\", \"disfrutar el proceso\", \"agradecer cada d√≠a\", \"sonre√≠r a la vida\" } Contacto Para cualquier consulta, propuesta o asunto relacionado con el contenido del blog, si√©ntete libre de escribirme a: üìÆ Email: angelazuara444@gmail.com (por favor indica el motivo) üì± Twitter (X): micuenta (por MD) ","date":"2023-11-15","objectID":"/es/about/:0:0","tags":["hola mundo"],"title":"Sobre m√≠","uri":"/es/about/"}]
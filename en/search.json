[{"categories":["University","Personal Projects"],"content":"An university project for the course System Oriented Services.","date":"2025-07-25","objectID":"/en/posts/sos/","tags":["Java","Spring","API"],"title":"RESTful Service","uri":"/en/posts/sos/"},{"categories":["University","Personal Projects"],"content":"1 Introduction This project implements a RESTful web service (REST API) in Java using the Spring Framework and Maven. It was developed as part of the Service-Oriented Systems course in the Computer Science degree. All the source code is available in my GitHub repository. ‚ö†Ô∏è Note: Since the course is taught in Spanish, all source code, directories, and documentation are in Spanish. 2 Overview The service provides basic functionality for managing book loans in a library. In the following image we can see the entity-relationship model: Note: The relation books-loans is intended to be a one-one relationship but our implementation allows multiple loans per book as long as the book is available. 3 REST API Design The root URL of the service is http://localhost:8080/biblioteca.api/. The API exposes three resources: /libros (books) /users /prestamos (loans) Each one allows full CRUD operations (Create, Read, Update, Delete), using the standard HTTP methods (GET, POST, PUT, DELETE). The following endpoints are available: 3.1 üìö Books GET /libros GET /libros/{isbn} GET /libros/{isbn}/unidades ‚Äì Number of available copies GET /libros?titulo_contiene={titulo} ‚Äì Search by title GET /libros?disponible={true|false} ‚Äì Search by availability POST /libros PUT /libros/{isbn} DELETE /libros/{isbn} 3.2 üìÑ Loans GET /prestamos GET /prestamos/{id} POST /prestamos PUT /prestamos/{id} ‚Äì Return book or verify loan (set devuelto attribute to true || set verificar_devolucion to true) DELETE /prestamos/{id} 3.3 üë§ Users GET /users GET /users/{matricula} ‚Äì Student ID GET /users/{matricula}/prestamos ‚Äì Loans by student PUT /users/{matricula}/prestamos/{id} ‚Äì Extend loan (set ampliar attribute to true) GET /users/{matricula}/actividad ‚Äì Student‚Äôs activity POST /users PUT /users/{matricula} DELETE /users/{matricula} 4 Architecture The project follows the Controller-Service-Repository pattern, with the following structure: Model: Represents the database information through entities, relationships, and attributes (the tables). Repository: Responsible for directly interacting with the database. Service: Contains the application logic and communicates with the repository to process data. Controller: Manages HTTP requests and responses, connecting the client with the service logic. As shown in the following image, this is the structure of the project: In the Exceptions folder, all error types for each resource are declared, along with their corresponding HTTP status codes. All the code shown below will be related to loans since it‚Äôs the entity that links books and users, and therefore it‚Äôs the most representative of the API‚Äôs general behavior. 4.1 Models The first step is to define the entities that make up the database. To do this, we declare two classes for each entity within the models folder: One class where we define the table and its attributes. Another one containing the ModelAssembler, which allows us to add HATEOAS links to the resources. Below is the model for the Prestamo (Loan) entity, which makes use of: Lombok (@Data, @NoArgsConstructor, @AllArgsConstructor) to automatically generate getters, setters, and constructors. JPA (@Entity, @Table, @Id, etc.) to map the class to a table in the database. Spring HATEOAS (extends RepresentationModel\u003cPrestamo\u003e) to add HATEOAS links to the resources via the ModelAssembler. package es.upm.sos.biblioteca.models; import java.time.LocalDate; import org.springframework.hateoas.RepresentationModel; import com.fasterxml.jackson.annotation.JsonBackReference; import jakarta.persistence.*; import lombok.*; @Entity @Table(name = \"Prestamo\") @Data @NoArgsConstructor @AllArgsConstructor public class Prestamo extends RepresentationModel\u003cPrestamo\u003e { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private int id; @ManyToOne @JoinColumn(name = \"usuario_id\") //user_id @JsonBackReference private Usuario usuario; @ManyToOne @JoinColumn(name = \"libro_id\") //book_id private Libro libro; @Column(name = \"fecha_prestamo\", nullable =","date":"2025-07-25","objectID":"/en/posts/sos/:0:0","tags":["Java","Spring","API"],"title":"RESTful Service","uri":"/en/posts/sos/"},{"categories":["University","Personal Projects"],"content":"An university project for the course Language Translators.","date":"2025-06-17","objectID":"/en/posts/tdl/","tags":["Java","Python"],"title":"Language Translator","uri":"/en/posts/tdl/"},{"categories":["University","Personal Projects"],"content":"1 Introduction In this article, I explain how a compiler works, from processing the source file to translating it into object code. This post is based on a university project for the course Language Translators. All source code is available in my GitHub repository (link at the end, in the Tools section). The translator takes a source file written in the Boreal Language, previously validated by the processor, and generates an .ens file with the object code of the program, written in the ENS2001 Language. The project is divided into two main parts: Language processor, written in Java, provided by the course and extended by us. Language translator, developed from scratch in Python. Note: This implementation only covers: The sentences IF-THEN and IF-THEN-ELSE. The minimum operator MIN. The procedures PROCEDURE with parameter passing by value and by reference. The operators *, AND and = (comparison operator, not assignment). ‚ö†Ô∏è The rest of the operators are not covered. ‚ö†Ô∏è No optimization is performed on the generated object code (assembly). ‚ö†Ô∏è The original Boreal language and the ENS2001 assembler materials may not be available temporarily. This post focuses on my implementation of the compiler, not on the distribution of the original materials. If you need to consult them, you can try accessing it later or search for archived versions. Additional Note: All the code in this implementation is written in Spanish, as the course was taught in Spanish. However, this shouldn‚Äôt be a problem, as the concepts are explained in English. 2 Language Processor The language processor is responsible for validating that a source file has no lexical, syntactic or semantic errors. This module is divided into four phases: Lexical analyzer Syntactic analyzer Semantic analyzer Intermediate code generator, which in reality belongs to the translator but is part of the processor‚Äôs code. Before starting, it is important to know the following concepts: Symbol table: is responsible for storing identifiers of variables, constants, procedures, etc. E.g. TABLA PRINCIPAL #1: *LEXEMA: 'S1' // lexeme Atributos: //attributes + Tipo: 'cadena' //type + Despl: 4 //offset + Param: 0 *LEXEMA: 'IMPRIME' Atributos: + Tipo: 'procedimiento' + numParam: 2 + TipoParam0: 'entero' //parameter type + TipoParam1: 'entero' + ModoParam0: 'valor' //parameter mode (value or reference) + ModoParam1: 'valor' + TipoRetorno: '-' //return type + EtiqFuncion: 'EtiqProc2' //procedure label Parse: is responsible for storing the order in which the grammar rules are executed. E.g. bottom-up 2 21 20 19 20 20 18 17 17 17 17 15 9 100 20 100 20 ... bottom-up indicates the type of parser used by the syntactic analyzer. Tokens: can be anything ‚Äî a for, a ;, the name of a variable, etc. The source file is split into tokens, which are stored in a separate file with this name. E.g. \u003cVAR,-\u003e \u003cID,1\u003e \u003cDOSPUNTOS,-\u003e // collon \u003cSTRING,-\u003e \u003cPYC,-\u003e // semicolon \u003cID,2\u003e \u003cDOSPUNTOS,-\u003e ... Finally, the type of parser. In this case, we use a bottom-up parser, but there are also top-down parsers, table-driven top-down parsers, and others. 2.1 Lexical analyzer For lexical errors, we use a finite automaton that goes through the source file character by character. As it advances, it evaluates the states of the automaton, and if everything goes well, a tokens file is generated as output. If any symbol does not fit the automaton, it is considered a lexical error. E.g. of an automaton: A typical case of a lexical error is an unterminated string. The following image shows an automaton that recognizes strings enclosed in quotes: Here, C represents any character. To reach the final state and correctly recognize a string, we need to end with a \". Lexical errors also include situations such as: A string that exceeds the maximum allowed length A number out of range Invalid characters in the language Among others. 2.2 Syntactic analyzer For syntactic errors, we analyze the language structure through grammar rules. These errors app","date":"2025-06-17","objectID":"/en/posts/tdl/:0:0","tags":["Java","Python"],"title":"Language Translator","uri":"/en/posts/tdl/"},{"categories":null,"content":" Let all you do be done in love ‚Äî 1 Corinthians 16:14 About Me Hey everyone! üëã My name is √Ångel, and I‚Äôm a fourth-year Computer Science student focused on software development and cloud infrastructure management. üë®‚Äçüíª Software developer ‚òÅÔ∏è Passionate about Cloud Computing and Infrastructure ¬†My GitHub: azuar4e In my free time, aside from learning new things, I enjoy working out, reading, and discovering music. If you‚Äôre curious, here‚Äôs my Spotify profile. One of my favorite albums: About This Blog The purpose of this blog is to document my learning journey in tech by explaining concepts clearly and accessibly‚Äîfor both beginners and experienced readers. Topics Covered ‚òÅÔ∏è Cloud infrastructure (AWS, GCP, Azure) üê≥ Containers and orchestration (Docker, Kubernetes) üß† Architecture and best practices üõ†Ô∏è Personal and university projects You can follow my posts here or on GitHub. // Things I try to live by const attitude := { \"learn something new\", \"enjoy the process\", \"be thankful every day\", \"smile at life\" } Contact For any inquiries, ideas, or anything related to the blog, feel free to reach out: üìÆ Email: azuar4e@gmail.com (please include a subject) üì± Twitter (X): @azuar4e (DMs open) ","date":"2023-11-15","objectID":"/en/about/:0:0","tags":["hello world"],"title":"About Me","uri":"/en/about/"}]